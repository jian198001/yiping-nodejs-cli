import { BaseService } from '../common/service/base.service';
import { ReqParam } from '../common/model/ReqParam';
import { Page } from '../common/model/Page';
import { PurchaseOrder } from '../../entity/PurchaseOrder';
import { Material } from '../../entity/Material';
import { PurchaseOrderItem } from '../../entity/PurchaseOrderItem';
export declare class PurchaseOrderService extends BaseService {
    private orderNotifyWxpayReturnStr;
    private logger;
    private static TABLE_NAME;
    private fromSql;
    private selectSql;
    private repository;
    private purchaseOrderItemRepository;
    private shopBuyerRepository;
    private materialRepository;
    private buyerReceiveAddressRepository;
    private deliveryListRepository;
    private stockRepository;
    private userService;
    page(userId: any, tradeState: string, query: string, params: string, reqParam: ReqParam, page: Page): Promise<any>;
    private getToRedis;
    getById(id?: string): Promise<any>;
    del(idsArr: string[]): Promise<void>;
    submit(id?: string): Promise<PurchaseOrder>;
    update(obj: PurchaseOrder): Promise<PurchaseOrder>;
    updateItem(obj: Material, purchaseOrderItem: PurchaseOrderItem, type: string): Promise<PurchaseOrderItem>;
    buy(map: any, shopBuyerId: string, priceUnit: number): Promise<PurchaseOrder>;
    createOrder(shopBuyerId?: string, shopId?: string): Promise<PurchaseOrder>;
    getPostFee(orderId: string): Promise<number>;
    getOutPurchaseNo(): Promise<string>;
    updateAddress(id: string, addressId: string): Promise<PurchaseOrder>;
    orderCount(shopBuyerId?: string, shopId?: string): Promise<void>;
    alipayWapPay(orderId: string): Promise<void>;
    alipayRefund(orderId: string): Promise<void>;
    alipayClose(orderId: string): Promise<void>;
    wxpayUnifiedOrder(orderId: string): Promise<void>;
    callParseOrderNotifyResult(xmlData: string): Promise<string>;
    orderSuccess(outPurchaseNo: string, payType: string): Promise<void>;
    subStock(orderId: string, subStockType: string): Promise<void>;
    refund(orderId: string): Promise<void>;
    updateTotalAmount(orderId: string, newTotalAmount: number): Promise<void>;
    updateShopMemo(orderId: string, memo: string): Promise<void>;
    updateMessage(orderId: string, message: string): Promise<void>;
    auditRefund(orderId: string): Promise<void>;
    close(orderId: string): Promise<void>;
    refundStock(orderId: string): Promise<void>;
    callParseRefundNotifyResult(xmlData: string): Promise<string>;
    setDelivery(orderId: string, deliveryCompany: string, deliveryTrackNo: string, needDelivery: string, isOthers: string): Promise<void>;
    payBalance(id: string): Promise<void>;
    refundBalance(id: string): Promise<void>;
    bonusToAmount(bonus: number, rate: number): Promise<number>;
    send(orderId: string, deliveryList: any[]): Promise<void>;
    purchaseInstock(data: any): Promise<void>;
}
