import { BaseService } from '../common/service/base.service';
import { ReqParam } from '../common/model/ReqParam';
import { Page } from '../common/model/Page';
import { MemberCard } from '../../entity/MemberCard';
export declare class MallMemberCardService extends BaseService {
    private logger;
    private static TABLE_NAME;
    private fromSql;
    private selectSql;
    private repository;
    page(query: string, params: string, reqParam: ReqParam, page: Page): Promise<any>;
    private getToRedis;
    getById(id?: string): Promise<any>;
    del(ids: string[]): Promise<void>;
    update(obj: MemberCard): Promise<MemberCard>;
    checkCardBaseInfo(card: any): Promise<void>;
    decryptCardCode(encryptCode: any): Promise<void>;
    queryCardCode(cardId: string, code: string, checkConsume: boolean): Promise<void>;
    consumeCardCode(code: string): Promise<void>;
    updateUserCardStatus(memberCardOffer: any): Promise<void>;
    markCardCode(code: string, cardId: string, shopBuyerId: string, isMark: boolean): Promise<void>;
    getCardDetail(cardId: string): Promise<void>;
    createCard(cardCreateMessage: any, goods: any): Promise<void>;
    createCardOffer(cardCreateMessage: any, quantity: number): Promise<void>;
    createQrcodeCard(cardId: string, outerStr: string, expiresIn: number, shopBuyerId: string, code: string, isUniqueCode: boolean): Promise<void>;
    unavailableCardCode(cardId: string, code: string, reason: string): Promise<void>;
    deleteCard(cardId: string): Promise<void>;
    cardCodeDeposit(cardId: string, codeList: string[]): Promise<void>;
    cardCodeDepositCount(cardId: string): Promise<void>;
    cardCodeCheckcode(cardId: string, codeList: string[]): Promise<void>;
    cardMpnewsGethtml(cardId: string): Promise<void>;
    cardModifyStock(cardId: string, changeValue: number): Promise<void>;
    cardCodeUpdate(cardId: string, oldCode: string, newCode: string): Promise<void>;
    cardPaycellSet(cardId: string, isOpen: boolean): Promise<void>;
    cardSelfConsumeCellSet(cardId: string, isOpen: boolean, needVerifyCod: boolean, needRemarkAmount: boolean): Promise<void>;
    getUserCardList(shopBuyerId: string, cardId: string): Promise<void>;
    beginCard(code: string, shopBuyerId: string, cardId: string): Promise<void>;
    userGetCard(code: string, shopBuyerId: string, cardId: string, orderItemId: string): Promise<void>;
    auditRefund(orderId: string): Promise<void>;
    activate(code: string, cardId: string, activateBeginTime: any, activateEndTime: any, initBonus: number, initBalance: number): Promise<void>;
}
