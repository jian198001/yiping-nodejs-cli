import { BaseService } from "../common/service/base.service";
import { ReqParam } from "../common/model/ReqParam";
import { Page } from "../common/model/Page";
import { TradeOrder } from "../../entity/TradeOrder";
export declare class TradeOrderService extends BaseService {
    quitUrl: string;
    returnUrl: string;
    private domain;
    private static wxpayNotifyUrl;
    private logger;
    private app;
    private static TABLE_NAME;
    private fromSql;
    private selectSql;
    private selectSqlOrderItem;
    private fromSqlOrderItem;
    private repository;
    private orderItemRepository;
    private shopBuyerRepository;
    private goodsRepository;
    private buyerReceiveAddressRepository;
    private shopRepository;
    private deliveryListRepository;
    private deliveryTemplateLocaleService;
    private deliveryTemplateGlobalService;
    private cartItemService;
    private buyerReceiveAddressService;
    private goodsService;
    private goodsMessageService;
    private userService;
    page(tradeState: string, shopId: string, shopBuyerId: any, query: string, params: string, reqParam: ReqParam, page: Page): Promise<any>;
    getById(id?: string): Promise<any>;
    getOrderItems(orderId?: string): Promise<any[]>;
    del(ids: string[]): Promise<void>;
    update(obj: TradeOrder): Promise<TradeOrder>;
    amountBuy(totalAmount: number, message: string, shopBuyerId: any, shopMemo?: string): Promise<TradeOrder>;
    buy(map: any, shopBuyerId: any, priceUnit?: number): Promise<TradeOrder>;
    createOrder(shopBuyerId?: string, shopId?: string, cartItems?: string[]): Promise<TradeOrder>;
    submitOrder(orderId: string, cartItems?: string[], shopBuyerId?: string, shopId?: string): Promise<TradeOrder>;
    getPostFee(orderId: string): Promise<number>;
    getOutTradeNo(): string;
    updateAddress(id: string, addressId: string): Promise<TradeOrder>;
    orderCount(shopBuyerId?: string, shopId?: string): Promise<void>;
    alipayWapPay(orderId: string): Promise<void>;
    alipayRefund(orderId: string): Promise<void>;
    alipayClose(orderId: string): Promise<void>;
    wxpayUnifiedOrder(orderId: string): Promise<void>;
    paymentNotice(data?: any, shopId?: string): Promise<string>;
    getWxpay(shopId?: string): Promise<any>;
    orderSuccess(outTradeNo: string, payType: string): Promise<void>;
    subStock(orderId: string, subStockType: string): Promise<void>;
    refund(orderId: string): Promise<void>;
    updateTotalAmount(orderId: string, newTotalAmount: number): Promise<void>;
    updateShopMemo(orderId: string, memo: string): Promise<void>;
    updateMessage(orderId: string, message: string): Promise<TradeOrder>;
    auditRefund(orderId: string): Promise<void>;
    close(orderId: string): Promise<void>;
    refundStock(orderId: string): Promise<void>;
    setDelivery(orderId: string, deliveryCompany: string, deliveryTrackNo: string, needDelivery: string, isOthers: string): Promise<void>;
    payBalance(id: string): Promise<void>;
    refundBalance(id: string): Promise<void>;
    bonusToAmount(bonus: number, rate: number): Promise<number>;
    send(orderId: string, deliveryList: any[]): Promise<void>;
    countTradeState(shopId: string, shopBuyerId: string): Promise<any[]>;
    createProfitsharingOrders(shopId: string, transactionId: string, receivers: any[]): Promise<void>;
    chart(): Promise<any>;
}
